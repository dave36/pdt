import unittest
from io import BytesIO as StringIO
import sys

sys.path.append('src/03_Exploitation/')
from Default_passwords.parser_passwords import *
from Modbus_Exp.write_single_register import *
from Modbus_Exp.write_single_coils import *
from Siemens_Exp.s7_pwd_hashes_extractor import *

### python -m unittest discover -s tests
### python -m unittest discover -s tests -p test_exploitation.py

class ExploitationTestSuite(unittest.TestCase):
    """Exploitation test cases."""

    """Test to check the default passwords printed on console"""
    def test_default_passwords(self):
        # Store the standard output to assert the result then
        capturedOutput = StringIO()
        sys.stdout = capturedOutput
        # Function to test
        print_default_passwords()
        # Assert that we are in the footprinting menu
        self.assertTrue("Vendor" in capturedOutput.getvalue())

    """Test to check the extraction of password hashes from S7 PLF file"""
    def test_extract_s7_password_hashes(self):
        # Store the standard output to assert the result then
        capturedOutput = StringIO()
        sys.stdout = capturedOutput
        # Function to test
        filePath = "tests/files/PEData.asd"
        extract_s7_password_hashes(filePath)
        self.assertIsNotNone(capturedOutput.getvalue())

    """Test to check the extraction of password hashes from S7 PLF file with wrong input"""
    def test_extract_s7_password_hashes_wrong_input(self):
        # Store the standard output to assert the result then
        capturedOutput = StringIO()
        sys.stdout = capturedOutput
        # Function to test
        filePath = "tests/files/PEData.asd"
        extract_s7_password_hashes(filePath)
        self.assertTrue("The file extension must be plf" in capturedOutput.getvalue())

if __name__ == '__main__':
    unittest.main()