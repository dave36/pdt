import os
import sys

sys.path.append('lib/smod/')
from System.Core.Global import *
from System.Core.Colors import *
from System.Core.Modbus import *


registerAddr = '0x0000'
registerValue = '0x0001'

def printLine(str,color):
    if(str.find('[+]') != -1):
        print str.replace('[+]',color + '[+]' + bcolors.ENDC)
    elif(str.find('[-]') != -1):
        print str.replace('[-]',color + '[-]' + bcolors.ENDC)
    else:
        print str

def write_single_register(ip, uid):
    if (ask_register_values()):
        c = connectToTarget(ip,502)
        if( c == None):
            printLine('[-] Modbus is not running on : ' + ip,bcolors.WARNING)
            return None
        printLine('[+] Connecting to ' + ip,bcolors.OKGREEN)
        ans = c.sr1(ModbusADU(transId=getTransId(),unitId=int(uid))/ModbusPDU06_Write_Single_Register(registerAddr=int(registerAddr,16),registerValue=int(registerValue,16)),timeout=timeout, verbose=0)
        ans = ModbusADU_Answer(str(ans))
        printLine('[+] Response is :',bcolors.OKGREEN)
        ans.show()

def ask_register_values():
    global registerAddr
    global registerValue
    registerA = raw_input("Enter the register address (default address is 0): ")
    registerV = raw_input("Enter the register value (number between 0 and 65535): ")
    if (is_valid_register(registerA) and is_valid_register(registerV)):
        registerAddr = registerA
        registerValue = registerV
        return True
    else:
        return False

def is_valid_register(register):
    if (register != ''):
        try:
            register = int(register)
        except:
            print("Error. Entrada no valida. No es un numero.")
            return False
    if (register < 0 or register > 65535):
        print("Error. Entrada no valida. No es un numero.")
        return False
    return True
    


